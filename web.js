// Generated by CoffeeScript 1.4.0
var Config, Credential, GoogleStrategy, User, app, express, grammar, mongoStore, mongoose, passport, _;

_ = require('underscore');

express = require('express');

mongoose = require('mongoose');

passport = require('passport');

GoogleStrategy = require('passport-google').Strategy;

mongoStore = require('connect-mongodb');

Config = require('./config/config');

User = require('./models/user');

Credential = require('./models/credential');

grammar = require('./grammar');

app = express.createServer(express.logger());

passport.serializeUser(function(user, done) {
  return done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  return User.findById(id, function(err, user) {
    return done(err, user);
  });
});

app.configure(function() {
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.set('view options', {
    pretty: true
  });
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.cookieParser());
  app.use(express.session({
    secret: process.env.SESSION_SECRET,
    cookie: {
      expires: new Date(2099, 1, 1, 0, 0, 0, 0)
    },
    store: new mongoStore({
      url: Config.mongoUri
    })
  }));
  app.use(passport.initialize());
  app.use(passport.session());
  return app.use(express["static"](__dirname + '/public'));
});

app.configure('development', function() {
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

app.configure('production', function() {
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

passport.use(new GoogleStrategy({
  returnURL: Config.expandURL('/signin/google/return'),
  realm: Config.expandURL('/')
}, function(identifier, profile, done) {
  profile.provider = 'google';
  return User.findOne({
    openId: identifier
  }, function(err, user) {
    if (!user) {
      profile.openId = identifier;
      user = new User(profile);
      user.save(function(err) {
        if (err) {
          return console.log(err);
        }
      });
    }
    return done(err, user);
  });
}));

app.get('/signin/google', passport.authenticate('google'));

app.get('/signin/google/return', passport.authenticate('google', {
  failureRedirect: '/',
  successRedirect: '/'
}));

app.get('/', function(request, response) {
  return response.render('index', {
    user: request.user,
    title: 'werminal'
  });
});

app.get('/logout', function(request, response) {
  request.logout();
  return response.redirect(Config.expandURL('/'));
});

app.get('/e', function(request, response) {
  var args, executable, module, query, token;
  query = request.query.q;
  args = grammar.tokenize(query);
  token = args[0];
  try {
    try {
      module = require('./' + token);
    } catch (moduleNotFoundError) {
      throw new Error('Command not recognized');
    }
    executable = new module(request.user);
    return executable.exe(args, response);
  } catch (error) {
    return response.send({
      error: error.message
    });
  }
});

app.get('/auth/:service', function(request, response) {
  var authStrategy, executable, module, tmpPassport;
  module = require('./' + request.params.service);
  executable = new module(request.user);
  tmpPassport = require('passport');
  authStrategy = executable.authStrategy();
  tmpPassport.use(request.params.service, authStrategy);
  return tmpPassport.authenticate(request.params.service)(request, response);
});

app.get('/auth/callback/:service', function(request, response, next) {
  var authStrategy, executable, module, tmpPassport;
  module = require('./' + request.params.service);
  executable = new module(request.user);
  tmpPassport = require('passport');
  authStrategy = executable.authStrategy();
  tmpPassport.use(request.params.service, authStrategy);
  return tmpPassport.authenticate(request.params.service, {
    successRedirect: '/',
    failureRedirect: '/'
  })(request, response);
});

app.get('/terms', function(request, response) {
  return response.render('terms', {
    user: request.user,
    title: 'werminal'
  });
});

app.get('/privacy', function(request, response) {
  return response.render('privacy', {
    user: request.user,
    title: 'werminal'
  });
});

app.get('/autocomplete', function(request, response) {
  var tokenTree;
  tokenTree = require('./tokenTree');
  return response.send(tokenTree);
});

app.listen(Config.port, function() {
  return console.log("Listening on " + Config.port);
});
