// Generated by CoffeeScript 1.4.0
var URL, crypto, http, https, oauth2, querystring;

querystring = require('querystring');

crypto = require('crypto');

https = require('https');

http = require('http');

URL = require('url');

oauth2 = (function() {

  function oauth2(customHeaders) {
    this._accessTokenName = "access_token";
    this._authMethod = "Bearer";
    this._customHeaders = customHeaders || {};
  }

  oauth2.prototype.setAccessToken = function(name) {
    return this._accessTokenName = name;
  };

  oauth2.prototype.setAuthMethod = function(authMethod) {
    return this._authMethod = authMethod;
  };

  oauth2.prototype._buildAuthHeader = function(token) {
    return this._authMethod + ' ' + token;
  };

  oauth2.prototype._request = function(method, url, headers, post_body, access_token, callback) {
    var allowEarlyClose, callbackCalled, http_library, key, options, parsedUrl, passBackControl, queryStr, realHeaders, request, result, _i, _len;
    http_library = https;
    parsedUrl = URL.parse(url, true);
    if (parsedUrl.protocol === "https:" && !parsedUrl.port) {
      parsedUrl.port = 443;
    }
    if (parsedUrl.protocol !== "https:") {
      http_library = http;
    }
    realHeaders = this._customHeaders;
    if (headers) {
      for (_i = 0, _len = headers.length; _i < _len; _i++) {
        key = headers[_i];
        realHeaders[key] = headers[key];
      }
    }
    realHeaders['Host'] = parsedUrl.host;
    realHeaders['Content-Length'] = post_body ? Buffer.byteLength(post_body) : 0;
    realHeaders['Authorization'] = this._buildAuthHeader(access_token);
    if (access_token) {
      if (!parsedUrl.query) {
        parsedUrl.query = {};
      }
      parsedUrl.query[this._accessTokenName] = access_token;
    }
    result = "";
    queryStr = querystring.stringify(parsedUrl.query);
    if (queryStr) {
      queryStr = "?" + queryStr;
    }
    options = {
      host: parsedUrl.hostname,
      port: parsedUrl.port,
      path: parsedUrl.pathname + queryStr,
      method: method,
      headers: realHeaders
    };
    allowEarlyClose = false;
    callbackCalled = false;
    passBackControl = function(response, result) {
      if (!callbackCalled) {
        callbackCalled = true;
        if (response.statusCode !== 200 && response.statusCode !== 201 && response.statusCode !== 301 && response.statusCode !== 302) {
          return callback({
            statusCode: response.statusCode,
            data: result
          });
        } else {
          return callback(null, result, response);
        }
      }
    };
    request = http_library.request(options, function(response) {
      response.on("data", function(chunk) {
        return result += chunk;
      });
      response.on("close", function(err) {
        if (allowEarlyClose) {
          return passBackControl(response, result);
        }
      });
      return response.addListener("end", function() {
        return passBackControl(response, result);
      });
    });
    request.on('error', function(e) {
      callbackCalled = true;
      return callback(e);
    });
    if (method === 'POST' && post_body) {
      request.write(post_body);
    }
    return request.end();
  };

  oauth2.prototype.request = function(method, url, body, access_token, callback) {
    return this._request(method, url, body, access_token, callback);
  };

  oauth2.prototype.get = function(url, access_token, callback) {
    return this._request('GET', url, {}, "", access_token, callback);
  };

  oauth2.prototype.post = function(url, post_body, access_token, callback) {
    return this._request('POST', url, {}, post_body, access_token, callback);
  };

  return oauth2;

})();

module.exports = oauth2;
