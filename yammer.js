// Generated by CoffeeScript 1.4.0
var Config, Credential, OAuth2, OAuth2Strategy, querystring, yammer, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Credential = require('./models/credential');

OAuth2Strategy = require('passport-oauth').OAuth2Strategy;

OAuth2 = require('./oauth2');

_ = require('underscore');

Config = require('./config/config');

querystring = require('querystring');

yammer = (function() {

  function yammer(user) {
    this.user = user;
    this.authStrategy = __bind(this.authStrategy, this);

  }

  yammer.prototype.authStrategy = function() {
    var _this = this;
    return new OAuth2Strategy({
      authorizationURL: 'https://www.yammer.com/dialog/oauth',
      tokenURL: 'https://www.yammer.com/oauth2/access_token.json',
      callbackURL: Config.expandURL('/auth/callback/yammer'),
      passReqToCallback: true,
      clientID: process.env.YAMMER_CLIENT_ID,
      clientSecret: process.env.YAMMER_CLIENT_SECRET
    }, function(request, accessToken, refreshToken, profile, done) {
      return Credential.findOne({
        userId: _this.user.id,
        service: 'yammer'
      }, function(err, credential) {
        if (!credential) {
          credential = new Credential({
            userId: _this.user.id,
            service: 'yammer',
            oauth: {
              accessToken: accessToken.token
            }
          });
          credential.save(function(err) {
            if (err) {
              return console.log(err);
            }
          });
        }
        return done(err, request.user);
      });
    });
  };

  yammer.prototype.exe = function(args, response) {
    if (args.length === 1) {
      return this.read(10, response);
    } else {
      if (this[args[1]]) {
        return this[args[1]](args, response);
      } else {
        throw new Error('Command not recognized');
      }
    }
  };

  yammer.prototype.authorize = function(args, response) {
    return response.send({
      redirect: Config.expandURL('/auth/yammer')
    });
  };

  yammer.prototype.post = function(args, response) {
    var message, query,
      _this = this;
    if (!this.user) {
      throw new Error("You must login to use this command");
    }
    args.shift();
    args.shift();
    message = args.join(' ');
    query = Credential.findOne({
      userId: this.user.id,
      service: 'yammer'
    });
    query.select('oauth');
    return query.exec(function(err, credential) {
      var oauth2;
      try {
        if (!credential) {
          throw new Error("First run 'yammer authorize' to connect werminal to your Yammer account");
        }
        oauth2 = new OAuth2();
        return oauth2.post('https://www.yammer.com/api/v1/messages.json?body=' + querystring.escape(message), '', credential.oauth.accessToken, function(err, apiResult, apiResponse) {
          if (err) {
            console.log(err);
          }
          return response.send({
            stdout: JSON.parse(apiResult),
            template: Config.expandURL('/yammer.html')
          });
        });
      } catch (error) {
        return response.send({
          error: "Authorization error. Run 'yammer authorize' to connect werminal to your Yammer account"
        });
      }
    });
  };

  yammer.prototype.read = function(args, response) {
    var count, query,
      _this = this;
    if (!this.user) {
      throw new Error("You must login to use this command");
    }
    count = args[2] ? args[2] : 10;
    query = Credential.findOne({
      userId: this.user.id,
      service: 'yammer'
    });
    query.select('oauth');
    return query.exec(function(err, credential) {
      var oauth2;
      try {
        oauth2 = new OAuth2();
        return oauth2.get('https://www.yammer.com/api/v1/messages.json?threaded=extended&limit=' + querystring.escape(count), credential.oauth.accessToken, function(err, apiResult, apiResponse) {
          var output;
          if (err) {
            console.log(err);
          }
          output = _this._transformMessages(JSON.parse(apiResult));
          return response.send({
            stdout: output,
            template: Config.expandURL('/yammer.html')
          });
        });
      } catch (error) {
        return response.send({
          error: "Authorization error. Run 'yammer authorize' to connect werminal to your Yammer account"
        });
      }
    });
  };

  yammer.prototype._transformMessages = function(rawOutput) {
    var get_sender, messages;
    get_sender = function(sender_id) {
      return _.find(rawOutput.references, function(reference) {
        return sender_id === reference.id;
      });
    };
    messages = _.map(rawOutput.messages, function(message) {
      var extended_thread;
      message.sender = get_sender(message.sender_id);
      extended_thread = rawOutput.threaded_extended[message.thread_id];
      message.extended_thread = _.map(extended_thread, function(thread_item) {
        thread_item.sender = get_sender(thread_item.sender_id);
        return thread_item;
      });
      return message;
    });
    return {
      messages: messages
    };
  };

  return yammer;

})();

module.exports = yammer;
